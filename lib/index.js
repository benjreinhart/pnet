// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var config, getParamErrors, parseResponseBody, Path, pnet, request, safeExtend;
  Path = require('path');
  config = require(Path.join(__dirname, '..', 'config'));
  request = require('request');
  safeExtend = function (param$) {
    var extend;
    extend = param$.extend;
    return function () {
      return extend.apply(null, [{}].concat([].slice.call(arguments)));
    };
  }(require('underscore'));
  pnet = module.exports = {};
  pnet.get = function (method, params, callback) {
    var cache$, error;
    if (null == params)
      params = {};
    if (error = null != (cache$ = getParamErrors(method, params)) ? cache$[0] : void 0) {
      error = new Error(error.param + ' ' + error.message);
      process.nextTick(callback.bind(null, error));
      return;
    }
    request.get(pnet.urlFor(method, params), function (err, response, body) {
      var e;
      if (null != err || !(200 <= +response.statusCode && +response.statusCode < 300)) {
        return callback(null != err ? err : new Error('Response returned status code ' + response.statusCode));
      } else {
        try {
          return callback(null, parseResponseBody(body));
        } catch (e$) {
          e = e$;
          return callback(e);
        }
      }
    });
  };
  (function (param$, param$1) {
    var baseUrl, cache$, defaults, omit;
    {
      cache$ = param$;
      baseUrl = cache$.baseUrl;
      defaults = cache$.defaults;
    }
    omit = param$1.omit;
    defaults = safeExtend(defaults);
    pnet.apikey = function (key) {
      if (arguments.length) {
        if (key === null || key === void 0) {
          return defaults = omit(defaults, 'apikey');
        } else {
          return defaults.apikey = key;
        }
      } else {
        return defaults.apikey;
      }
    };
    return pnet.urlFor = function (method, params) {
      if (null == params)
        params = {};
      if (!/^pnet\./.test(method))
        method = 'pnet.' + method;
      params = safeExtend(defaults, params, { method: method });
      return baseUrl + '?' + function (accum$) {
        var key, value;
        for (key in params) {
          if (!isOwn$(params, key))
            continue;
          value = params[key];
          accum$.push('' + key + '=' + value);
        }
        return accum$;
      }.call(this, []).join('&');
    };
  }(config.pnet.api, require('underscore')));
  getParamErrors = function (method, params) {
    var errors;
    if (null == params)
      params = {};
    errors = [];
    if (!(null != method))
      errors.push({
        param: 'method',
        message: 'must be a valid phish.net API method'
      });
    if (null != params.showdate && !/^\d{4}-\d{2}-\d{2}$/.test(params.showdate))
      errors.push({
        param: 'showdate',
        message: 'must be in the format YYYY-MM-DD'
      });
    return errors.length && errors || null;
  };
  parseResponseBody = function (body) {
    var parsed;
    parsed = JSON.parse(body);
    if (null != parsed.success && parsed.success === 0)
      throw new Error(null != parsed.reason ? parsed.reason : 'Request failed with success code 0');
    return parsed;
  };
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
}.call(this);
